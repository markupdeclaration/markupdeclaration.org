buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.com" }
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.4.3'
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.29-99'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '1.0.6'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://maven.restlet.com" }
}

// Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
  }
}

defaultTasks 'website'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

// ======================================================================

task copy_css(type: Copy) {
  from "css/"
  into "build/css/"
  doFirst {
    mkdir("build")
    mkdir("build/css")
  }
}

task copy_js(type: Copy) {
  from "js/"
  into "build/js/"
  doFirst {
    mkdir("build")
    mkdir("build/js")
  }
}

task copy_img(type: Copy) {
  from "img/"
  into "build/img/"
  doFirst {
    mkdir("build")
    mkdir("build/img")
  }
}

task website(dependsOn: [ 'copy_css', 'copy_img', 'copy_js' ]) {
  doLast {
    println("Built website")
  }
}

task realgitlog(type: Exec) {
  outputs.file "build/git-log-summary.xml"
  commandLine 'tools/git-log-summary', '-o', 'build/git-log-summary.xml'
  doFirst {
    mkdir("build")
  }
}

task fakegitlog() {
  doLast {
    def stream = new FileOutputStream(new File("build/git-log-summary.xml"))
    def summary = new PrintStream(stream)
    summary.println("<git-repo-info xmlns='http://nwalsh.com/ns/git-repo-info'>")
    summary.println("</git-repo-info>")
    summary.close()
  }
  doFirst {
    mkdir("build")
  }
}

task gitlog() {
  // nop
}

// ======================================================================

def cwd = System.getProperty("user.dir")
if (!cwd.endsWith("/")) {
  cwd = cwd + "/"
}

// Only attempt to exec the Perl script that gets the git log on
// systems where we're confident it will succeed.
if ("true".equals(System.getenv("TRAVIS")) || "/Users/ndw".equals(System.getenv("HOME"))) {
  gitlog.dependsOn realgitlog
} else {
  gitlog.dependsOn fakegitlog
}

fileTree(dir: "src").include("**/*.md").each { File mdfile ->
  def relPath = mdfile.getAbsolutePath().substring(cwd.length())
  def outPath = relPath.replace("src/", "build/").replace(".md", ".html")
  def taskName = relPath.replace("/","_")

  Task t = task "$taskName"(type: XMLCalabashTask, dependsOn: ['gitlog']) {
    inputs.files fileTree(dir: "includes")
    inputs.file relPath
    inputs.file "tools/xsl/post.xsl"
    inputs.file "tools/xsl/pubdate.xsl"
    option("markdown", file(relPath))
    output("result", file(outPath))
    pipeline "tools/xpl/markdown.xpl"
  }
  website.dependsOn taskName
}

fileTree(dir: "src").include("**/*.html").each { File hfile ->
  def relPath = hfile.getAbsolutePath().substring(cwd.length())
  def outPath = relPath.replace("src/", "build/").replace(".md", ".html")
  def taskName = relPath.replace("/","_")

  Task t = task "$taskName"(type: XMLCalabashTask, dependsOn: ['gitlog']) {
    inputs.files fileTree(dir: "includes")
    inputs.file relPath
    input("source", file(relPath))
    output("result", file(outPath))
    pipeline "tools/xpl/html.xpl"
  }
  website.dependsOn taskName
}

fileTree(dir: "src").include("**/*.xml").each { File xfile ->
  def relPath = xfile.getAbsolutePath().substring(cwd.length())
  def outPath = relPath.replace("src/", "build/").replace(".xml", ".html")
  def taskName = relPath.replace("/","_")

  def vocabulary = null
  def scan = new Scanner(xfile)
  while (scan.hasNext()) {
    def line = scan.nextLine().toString()
    if (vocabulary == null && line.contains("/ns/docbook")) {
      vocabulary = "docbook"
    }
  }

  if (vocabulary == null) {
    throw new GradleException("Unrecognized XML vocabulary")
  }

  Task t = task "$taskName"(type: DocBookTask, dependsOn: ['gitlog']) {
    inputs.files fileTree(dir: "includes")
    inputs.file relPath
    input("source", file(relPath))
    output("result", file(outPath))
    option("style", file("tools/xsl/docbook.xsl"))
    pipeline "tools/xpl/docbook.xpl"
  }
  website.dependsOn taskName
}

// ======================================================================

task md_index(type: XMLCalabashTask, dependsOn: [ "copy_css", "copy_img" ]) {
  inputs.files fileTree(dir: "includes")
  inputs.file "src/index.md"

  option("markdown", new File("src/index.md").getAbsolutePath())
  option("id", "homepage")

  output("result", "build/index.html")
  pipeline "tools/xpl/markdown.xpl"
}

// ======================================================================

task clean() {
  doFirst {
    delete("build")
  }
}
