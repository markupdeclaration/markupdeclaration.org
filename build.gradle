buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }

  // Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01'
    }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.3.9'
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.24-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '0.13.2'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

// Get rid of that [expletive deleted] warning about xml-apis 2.0.2/1.0.b2
configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
  }
}

defaultTasks 'website'

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

// ======================================================================

task copy_css(type: Copy) {
  from "css/"
  into "build/css/"
  doFirst {
    mkdir("build")
    mkdir("build/css")
  }
}

task copy_img(type: Copy) {
  from "img/"
  into "build/img/"
  doFirst {
    mkdir("build")
    mkdir("build/img")
  }
}

task website(dependsOn: [ 'copy_css', 'copy_img' ]) {
  doLast {
    println("Built website")
  }
}

// ======================================================================

def cwd = System.getProperty("user.dir")
if (!cwd.endsWith("/")) {
  cwd = cwd + "/"
}

fileTree(dir: "src").include("**/*.md").each { File file ->
  def relPath = file.getAbsolutePath().substring(cwd.length())
  def outPath = relPath.replace("src/", "build/").replace(".md", ".html")
  def taskName = relPath.replace("/","_")

  Task t = task "$taskName"(type: XMLCalabashTask) {
    inputs.files fileTree(dir: "includes")
    inputs.file relPath
    option("markdown", new File(relPath).getAbsolutePath())
    output("result", outPath)
    pipeline "tools/xpl/markdown.xpl"
  }
  website.dependsOn taskName
}

fileTree(dir: "src").include("**/*.html").each { File file ->
  def relPath = file.getAbsolutePath().substring(cwd.length())
  def outPath = relPath.replace("src/", "build/").replace(".md", ".html")
  def taskName = relPath.replace("/","_")

  Task t = task "$taskName"(type: XMLCalabashTask) {
    inputs.files fileTree(dir: "includes")
    inputs.file relPath
    input("source", new File(relPath).getAbsolutePath())
    output("result", outPath)
    pipeline "tools/xpl/html.xpl"
  }
  website.dependsOn taskName
}

// ======================================================================

task md_index(type: XMLCalabashTask, dependsOn: [ "copy_css", "copy_img" ]) {
  inputs.files fileTree(dir: "includes")
  inputs.file "src/index.md"

  option("markdown", new File("src/index.md").getAbsolutePath())
  option("id", "homepage")

  output("result", "build/index.html")
  pipeline "tools/xpl/markdown.xpl"
}

// ======================================================================

task clean() {
  doFirst {
    delete("build")
  }
}
